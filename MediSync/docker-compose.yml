version: "3.8"

services:
  mysqldb:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}"
    volumes:
      - db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - medisync-network

  influxdb:
    image: influxdb:2.7
    ports:
      - "${INFLUXDB_PORT}"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - INFLUXDB_INIT_MODE=setup                        # These variables are defined in .env
      - INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}     # Admin username
      - INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}     # Admin password
      - INFLUXDB_INIT_ORG=${INFLUXDB_ORG}               # Organization name
      - INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}         # Bucket name
      - INFLUXDB_INIT_RETENTION=0                       # Retention policy (0 = unlimited)
      - INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}     # Admin token for API access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - medisync-network

  app:
    depends_on:
      mysqldb:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    build: .
    ports:
      - "${APP_PORT}"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url": "jdbc:mysql://mysqldb:3306/${MYSQL_DATABASE}?useSSL=false",
        "spring.datasource.username": "${MYSQL_USER}",
        "spring.datasource.password": "${MYSQL_PASSWORD}",
        "spring.jpa.hibernate.ddl-auto": "update",
        "spring.influx.url": "http://influxdb:8086",
        "spring.influx.org": "${INFLUXDB_ORG}",
        "spring.influx.bucket": "${INFLUXDB_BUCKET}",
        "spring.influx.token": "${INFLUXDB_TOKEN}",
        "spring.influx.username": "${INFLUXDB_USERNAME}",
        "spring.influx.password": "${INFLUXDB_PASSWORD}"
      }'
    volumes:
      - .m2:/root/.m2
      - ./target:/app/target
    networks:
      - medisync-network

  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile.frontend
      ports:
        - "${FRONTEND_PORT_VITE}"
        - "${FRONTEND_PORT_REACT}"
      volumes:
        - ./frontend:/app
        - /app/node_modules
      environment:
        - REACT_APP_API_URL=${API_URL}
        - VITE_APP_API_URL=${API_URL}
        - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
        - WATCHPACK_POLLING=${WATCHPACK_POLLING}
        - NODE_ENV=${NODE_ENV}
      depends_on:
        - app
      networks:
        - medisync-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_CLIENT_PORT}"
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}"
    networks:
      - medisync-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "$KAFKA_ZOOKEPER_CONNECT"
      KAFKA_ADVERTISED_LISTENERS: "${KAFKA_ADVERTISED_LISTENERS}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 5000
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "${KAFKA_HEALHTCHECK_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    ports:
      - "${KAFDROP_PORT}"
    environment:
      KAFKA_BROKERCONNECT: "${KAFDROP_BROKERCONNECT}"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - medisync-network

networks:
  medisync-network:
  
volumes:
  db:
  influxdb_data: